// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wirex

import (
	"context"
	"go-admin/internal/modules"
	"go-admin/internal/modules/auth"
	"go-admin/internal/modules/auth/api"
	"go-admin/internal/modules/auth/repo"
	"go-admin/internal/modules/auth/service"
	"go-admin/internal/modules/sys"
	api2 "go-admin/internal/modules/sys/api"
	repo2 "go-admin/internal/modules/sys/repo"
	service2 "go-admin/internal/modules/sys/service"
	"go-admin/pkg/util"
)

// Injectors from wire.go:

func BuildInjector(ctx context.Context) (*Injector, func(), error) {
	db, cleanup, err := InitDB(ctx)
	if err != nil {
		return nil, nil, err
	}
	cacher, cleanup2, err := InitCacher(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	auther, cleanup3, err := InitAuth(ctx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	trans := &util.Trans{
		DB: db,
	}
	menu := &repo.Menu{
		DB: db,
	}
	menuResource := &repo.MenuResource{
		DB: db,
	}
	roleMenu := &repo.RoleMenu{
		DB: db,
	}
	serviceMenu := &service.Menu{
		Cache:            cacher,
		Trans:            trans,
		MenuRepo:         menu,
		MenuResourceRepo: menuResource,
		RoleMenuRepo:     roleMenu,
	}
	apiMenu := &api.Menu{
		MenuService: serviceMenu,
	}
	role := &repo.Role{
		DB: db,
	}
	userRole := &repo.UserRole{
		DB: db,
	}
	serviceRole := &service.Role{
		Cache:        cacher,
		Trans:        trans,
		RoleRepo:     role,
		RoleMenuRepo: roleMenu,
		UserRoleRepo: userRole,
	}
	apiRole := &api.Role{
		RoleService: serviceRole,
	}
	user := &repo.User{
		DB: db,
	}
	serviceUser := &service.User{
		Cache:        cacher,
		Trans:        trans,
		UserRepo:     user,
		UserRoleRepo: userRole,
	}
	apiUser := &api.User{
		UserService: serviceUser,
	}
	serviceAuth := &service.Auth{
		Cache:        cacher,
		Auth:         auther,
		UserRepo:     user,
		UserRoleRepo: userRole,
		MenuRepo:     menu,
		UserService:  serviceUser,
	}
	apiAuth := &api.Auth{
		AuthService: serviceAuth,
	}
	casbinx := &auth.Casbinx{
		Cache:            cacher,
		MenuRepo:         menu,
		MenuResourceRepo: menuResource,
		RoleRepo:         role,
	}
	authAuth := &auth.Auth{
		DB:      db,
		MenuAPI: apiMenu,
		RoleAPI: apiRole,
		UserAPI: apiUser,
		AuthAPI: apiAuth,
		Casbinx: casbinx,
	}
	logger := &repo2.Logger{
		DB: db,
	}
	serviceLogger := &service2.Logger{
		LoggerRepo: logger,
	}
	apiLogger := &api2.Logger{
		LoggerService: serviceLogger,
	}
	sysSYS := &sys.SYS{
		DB:        db,
		LoggerAPI: apiLogger,
	}
	modulesModules := &modules.Modules{
		Auth: authAuth,
		SYS:  sysSYS,
	}
	injector := &Injector{
		DB:    db,
		Cache: cacher,
		Auth:  auther,
		Mods:  modulesModules,
	}
	return injector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
